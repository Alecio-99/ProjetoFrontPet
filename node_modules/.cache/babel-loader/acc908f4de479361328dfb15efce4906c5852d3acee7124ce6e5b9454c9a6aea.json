{"ast":null,"code":"import User from '../models/User';\nclass AuthController {\n  static async login(email, password) {\n    try {\n      // Aqui você implementaria a lógica real de autenticação\n      // Por enquanto, vamos simular um login bem-sucedido\n      const user = new User(1, 'Usuário Teste', email);\n      return {\n        success: true,\n        user: user.toJSON()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  static async register(userData) {\n    try {\n      // Aqui você implementaria a lógica real de registro\n      const user = new User(Date.now(), userData.name, userData.email);\n      return {\n        success: true,\n        user: user.toJSON()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  static logout() {\n    // Implementar lógica de logout\n    return {\n      success: true\n    };\n  }\n}\nexport default AuthController;","map":{"version":3,"names":["User","AuthController","login","email","password","user","success","toJSON","error","message","register","userData","Date","now","name","logout"],"sources":["C:/Repositorios/FrontEnd/JavaScript/FrontEndPet/src/controllers/AuthController.js"],"sourcesContent":["import User from '../models/User';\r\n\r\nclass AuthController {\r\n  static async login(email, password) {\r\n    try {\r\n      // Aqui você implementaria a lógica real de autenticação\r\n      // Por enquanto, vamos simular um login bem-sucedido\r\n      const user = new User(1, 'Usuário Teste', email);\r\n      return {\r\n        success: true,\r\n        user: user.toJSON()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  static async register(userData) {\r\n    try {\r\n      // Aqui você implementaria a lógica real de registro\r\n      const user = new User(\r\n        Date.now(),\r\n        userData.name,\r\n        userData.email\r\n      );\r\n      return {\r\n        success: true,\r\n        user: user.toJSON()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  static logout() {\r\n    // Implementar lógica de logout\r\n    return {\r\n      success: true\r\n    };\r\n  }\r\n}\r\n\r\nexport default AuthController; "],"mappings":"AAAA,OAAOA,IAAI,MAAM,gBAAgB;AAEjC,MAAMC,cAAc,CAAC;EACnB,aAAaC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAClC,IAAI;MACF;MACA;MACA,MAAMC,IAAI,GAAG,IAAIL,IAAI,CAAC,CAAC,EAAE,eAAe,EAAEG,KAAK,CAAC;MAChD,OAAO;QACLG,OAAO,EAAE,IAAI;QACbD,IAAI,EAAEA,IAAI,CAACE,MAAM,CAAC;MACpB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLF,OAAO,EAAE,KAAK;QACdE,KAAK,EAAEA,KAAK,CAACC;MACf,CAAC;IACH;EACF;EAEA,aAAaC,QAAQA,CAACC,QAAQ,EAAE;IAC9B,IAAI;MACF;MACA,MAAMN,IAAI,GAAG,IAAIL,IAAI,CACnBY,IAAI,CAACC,GAAG,CAAC,CAAC,EACVF,QAAQ,CAACG,IAAI,EACbH,QAAQ,CAACR,KACX,CAAC;MACD,OAAO;QACLG,OAAO,EAAE,IAAI;QACbD,IAAI,EAAEA,IAAI,CAACE,MAAM,CAAC;MACpB,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLF,OAAO,EAAE,KAAK;QACdE,KAAK,EAAEA,KAAK,CAACC;MACf,CAAC;IACH;EACF;EAEA,OAAOM,MAAMA,CAAA,EAAG;IACd;IACA,OAAO;MACLT,OAAO,EAAE;IACX,CAAC;EACH;AACF;AAEA,eAAeL,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}